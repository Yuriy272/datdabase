import React, { useMemo, useState } from "react";
import { supabase } from "./lib/supabase";
import { useClients } from "./hooks/useClients";
import { useProjects } from "./hooks/useProjects";
import { usePeople } from "./hooks/usePeople";
import { useVacancies } from "./hooks/useVacancies";
import { useAssignments } from "./hooks/useAssignments";
import { useAttendance } from "./hooks/useAttendance";

/* helpers */
const clsBtn = (s = "") => `px-3 py-2 rounded-xl border ${s}`;
const clsInp = "w-full border rounded-xl px-3 py-2";
const uid = (p) => p + Math.random().toString(36).slice(2, 8);

// –º–∞–ª–µ–Ω—å–∫–∏–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –≤–∏—Ö–æ–¥—É —ñ –∑ –∫–æ–¥-–ª–æ–≥—ñ–Ω—É, —ñ –∑ supabase
function signOutAll() {
  try {
    localStorage.removeItem("codeUser");
  } catch {}
  supabase.auth.signOut().finally(() => {
    // –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ, —â–æ–± —Å–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞–Ω
    window.location.reload();
  });
}

export default function App() {
  const [tab, setTab] = useState("dashboard");

  const { rows: clients, upsert: saveClient, remove: delClient } = useClients();
  const { rows: projects, upsert: saveProject, remove: delProject } = useProjects();
  const { rows: people, upsert: savePerson, remove: delPerson } = usePeople();
  const { rows: vacancies, upsert: saveVacancy, remove: delVacancy } = useVacancies();
  const { rows: assignments, upsert: saveAssign, remove: delAssign } = useAssignments();
  const { rows: attendance, upsert: saveAttend, remove: delAttend } = useAttendance();

  const today = new Date().toISOString().slice(0, 10);
  const active = assignments.filter(
    (a) =>
      a.status === "–ê–∫—Ç–∏–≤–Ω–∏–π" &&
      (!a.start || a.start <= today) &&
      (!a.end || a.end >= today)
  );
  const activePersonIds = new Set(active.map((a) => a.person_id));

  const clientsById = useMemo(
    () => Object.fromEntries(clients.map((c) => [c.client_id, c])),
    [clients]
  );
  const peopleById = useMemo(
    () => Object.fromEntries(people.map((p) => [p.person_id, p])),
    [people]
  );
  const projectsById = useMemo(
    () => Object.fromEntries(projects.map((p) => [p.project_id, p])),
    [projects]
  );

  const workedDays = useMemo(() => {
    const m = {};
    attendance.forEach((a) => {
      const s = (a.status || "").toLowerCase();
      if (s.includes("—è–≤") || s.includes("present") || s === "") {
        m[a.person_id] = (m[a.person_id] || 0) + 1;
      }
    });
    return m;
  }, [attendance]);

  return (
    <div className="min-h-screen bg-slate-50 text-slate-800">
      <header className="px-4 py-3 bg-white border-b sticky top-0 flex items-center justify-between">
        <Logo />
        <nav className="flex gap-1 flex-wrap">
          {[
            ["dashboard", "–î–∞—à–±–æ—Ä–¥"],
            ["leads", "–õ—ñ–¥–∏"],
            ["people", "–õ—é–¥–∏"],
            ["clients", "–ö–ª—ñ—î–Ω—Ç–∏"],
            ["projects", "–ü—Ä–æ—î–∫—Ç–∏"],
            ["vacancies", "–í–∞–∫–∞–Ω—Å—ñ—ó"],
            ["assignments", "–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"],
            ["attendance", "–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å"],
          ].map(([k, l]) => (
            <button
              key={k}
              onClick={() => setTab(k)}
              className={tab === k ? "btn btn-primary" : "btn"}
            >
              {l}
            </button>
          ))}
        </nav>
        <button className="btn" onClick={signOutAll}>
          –í–∏–π—Ç–∏
        </button>
      </header>

      <main className="p-4 max-w-7xl mx-auto space-y-8">
        {tab === "dashboard" && (
          <Card title="–î–∞—à–±–æ—Ä–¥">
            <p className="mb-4 text-sm text-slate-600">
              –í–∏ —É–≤—ñ–π—à–ª–∏ –∑–∞ –∫–æ–¥–æ–º (–∫–æ–¥-–ª–æ–≥—ñ–Ω). –ù–∏–∂—á–µ –ø—Ä–∞—Ü—é—î –≤–µ—Å—å —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ª—ñ–¥–∏, –ª—é–¥–∏,
              –∫–ª—ñ—î–Ω—Ç–∏, –ø—Ä–æ—î–∫—Ç–∏, –≤–∞–∫–∞–Ω—Å—ñ—ó, –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å.
            </p>
            <div className="grid sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <KPI label="–£—Å—å–æ–≥–æ –ª—é–¥–µ–π" value={people.length} />
              <KPI label="–ü—Ä–∞—Ü—é—î –∑–∞—Ä–∞–∑" value={activePersonIds.size} />
              <KPI label="–ö–ª—ñ—î–Ω—Ç—ñ–≤" value={clients.length} />
              <KPI
                label="–í–∞–∫–∞–Ω—Å—ñ–π –≤—ñ–¥–∫—Ä–∏—Ç–æ"
                value={vacancies.filter((v) => v.status === "–í—ñ–¥–∫—Ä–∏—Ç–∞").length}
              />
            </div>
          </Card>
        )}

        {tab === "leads" && (
          <Card
            title="–õ—ñ–¥–∏"
            action={<PersonModal onSave={savePerson} clients={clients} />}
          >
            <Table
              columns={[
                ["–ü–Ü–ë", (r) => r.name],
                ["–¢–µ–ª–µ—Ñ–æ–Ω", (r) => r.phone || "‚Äî"],
                ["–†–µ–∫—Ä—É—Ç–µ—Ä", (r) => r.recruiter || "‚Äî"],
                ["–°—Ç–∞—Ç—É—Å", (r) => r.status],
                ["–¶—ñ–ª—å–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç", (r) => clientsById[r.target_client_id]?.company || "‚Äî"],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <PersonModal initial={r} onSave={savePerson} clients={clients} />
                      <button className="btn ml-2" onClick={() => delPerson(r.person_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={people.filter((p) => (p.status || "lead") === "lead")}
            />
          </Card>
        )}

        {tab === "people" && (
          <Card
            title="–õ—é–¥–∏"
            action={<PersonModal onSave={savePerson} clients={clients} />}
          >
            <Table
              rowClass={(r) => (activePersonIds.has(r.person_id) ? "bg-emerald-50" : "")}
              columns={[
                [
                  "–ü–Ü–ë",
                  (r) => (
                    <span className="flex items-center gap-2">
                      {r.name}
                      {activePersonIds.has(r.person_id) && (
                        <span className="text-xs bg-emerald-200 text-emerald-800 rounded-full px-2">
                          –ø—Ä–∞—Ü—é—î
                        </span>
                      )}
                    </span>
                  ),
                ],
                ["–¢–µ–ª–µ—Ñ–æ–Ω", (r) => r.phone || "‚Äî"],
                ["–ú—ñ—Å—Ç–æ", (r) => r.city || "‚Äî"],
                ["–†–µ–∫—Ä—É—Ç–µ—Ä", (r) => r.recruiter || "‚Äî"],
                ["–°—Ç–∞—Ç—É—Å", (r) => r.status],
                ["–¶—ñ–ª—å–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç", (r) => clientsById[r.target_client_id]?.company || "‚Äî"],
                ["–î–Ω—ñ–≤", (r) => workedDays[r.person_id] || 0],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <PersonModal initial={r} onSave={savePerson} clients={clients} />
                      <button className="btn ml-2" onClick={() => delPerson(r.person_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={people}
            />
          </Card>
        )}

        {tab === "clients" && (
          <Card title="–ö–ª—ñ—î–Ω—Ç–∏" action={<ClientModal onSave={saveClient} />}>
            <Table
              columns={[
                ["–ö–æ–º–ø–∞–Ω—ñ—è", (r) => r.company],
                ["–õ–æ–∫–∞—Ü—ñ—è", (r) => r.location || "‚Äî"],
                ["–ù–æ—Ç–∞—Ç–∫–∞", (r) => r.note || "‚Äî"],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <ClientModal initial={r} onSave={saveClient} />
                      <button className="btn ml-2" onClick={() => delClient(r.client_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={clients}
            />
          </Card>
        )}

        {tab === "projects" && (
          <Card
            title="–ü—Ä–æ—î–∫—Ç–∏"
            action={<ProjectModal onSave={saveProject} clients={clients} />}
          >
            <Table
              columns={[
                ["–ù–∞–∑–≤–∞", (r) => r.name],
                ["–ö–ª—ñ—î–Ω—Ç", (r) => clientsById[r.client_id]?.company || "‚Äî"],
                ["–ù–æ—Ç–∞—Ç–∫–∞", (r) => r.note || "‚Äî"],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <ProjectModal initial={r} onSave={saveProject} clients={clients} />
                      <button className="btn ml-2" onClick={() => delProject(r.project_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={projects}
            />
          </Card>
        )}

        {tab === "vacancies" && (
          <Card
            title="–í–∞–∫–∞–Ω—Å—ñ—ó"
            action={<VacancyModal onSave={saveVacancy} clients={clients} />}
          >
            <Table
              columns={[
                ["–ö–æ–º–ø–∞–Ω—ñ—è", (r) => clientsById[r.client_id]?.company || "‚Äî"],
                ["–ü–æ–∑–∏—Ü—ñ—è", (r) => r.position],
                ["–°—Ç–∞–≤–∫–∞", (r) => r.rate],
                ["–°—Ç–∞—Ç—É—Å", (r) => r.status],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <VacancyModal initial={r} onSave={saveVacancy} clients={clients} />
                      <button className="btn ml-2" onClick={() => delVacancy(r.vacancy_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={vacancies}
            />
          </Card>
        )}

        {tab === "assignments" && (
          <Card
            title="–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è"
            action={
              <AssignmentModal
                onSave={saveAssign}
                people={people}
                clients={clients}
                projects={projects}
              />
            }
          >
            <Table
              columns={[
                ["–ö–∞–Ω–¥–∏–¥–∞—Ç", (r) => peopleById[r.person_id]?.name || "‚Äî"],
                ["–ö–ª—ñ—î–Ω—Ç", (r) => clientsById[r.client_id]?.company || "‚Äî"],
                ["–ü—Ä–æ—î–∫—Ç", (r) => projectsById[r.project_id]?.name || "‚Äî"],
                ["–ü–æ–∑–∏—Ü—ñ—è", (r) => r.position || "‚Äî"],
                ["–î–æ–≥–æ–≤—ñ—Ä", (r) => r.contract_type || "‚Äî"],
                ["–°—Ç–∞–≤–∫–∞", (r) => r.rate || "‚Äî"],
                ["–ü–æ—á–∞—Ç–æ–∫", (r) => r.start || "‚Äî"],
                ["–ö—ñ–Ω–µ—Ü—å", (r) => r.end || "‚Äî"],
                ["–°—Ç–∞—Ç—É—Å", (r) => r.status],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <AssignmentModal
                        initial={r}
                        onSave={saveAssign}
                        people={people}
                        clients={clients}
                        projects={projects}
                      />
                      <button className="btn ml-2" onClick={() => delAssign(r.assignment_id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={assignments}
            />
          </Card>
        )}

        {tab === "attendance" && (
          <Card
            title="–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å"
            action={<AttendanceModal onSave={saveAttend} people={people} clients={clients} />}
          >
            <Table
              columns={[
                ["–î–∞—Ç–∞", (r) => r.date],
                ["–ö–∞–Ω–¥–∏–¥–∞—Ç", (r) => peopleById[r.person_id]?.name || "‚Äî"],
                ["–ö–ª—ñ—î–Ω—Ç", (r) => clientsById[r.client_id]?.company || "‚Äî"],
                ["–ó–º—ñ–Ω–∞", (r) => r.shift || "‚Äî"],
                ["–ì–æ–¥–∏–Ω–∏", (r) => r.hours || 0],
                ["–°—Ç–∞—Ç—É—Å", (r) => r.status || "‚Äî"],
                [
                  "–î—ñ—ó",
                  (r) => (
                    <>
                      <AttendanceModal
                        initial={r}
                        onSave={saveAttend}
                        people={people}
                        clients={clients}
                      />
                      <button className="btn ml-2" onClick={() => delAttend(r.id)}>üóë</button>
                    </>
                  ),
                ],
              ]}
              rows={attendance}
            />
          </Card>
        )}
      </main>
    </div>
  );
}

/* ===== UI building blocks ===== */
function Card({ title, action, children }) {
  return (
    <div className="bg-white border rounded-2xl p-4 shadow-sm">
      <div className="flex items-center justify-between mb-3">
        <h2 className="font-semibold">{title}</h2>
        {action}
      </div>
      {children}
    </div>
  );
}
function Table({ columns, rows, rowClass }) {
  return (
    <div className="overflow-x-auto border rounded-xl">
      <table className="w-full text-sm">
        <thead className="bg-slate-100">
          <tr>
            {columns.map(([h], i) => (
              <th key={i} className="text-left p-2">
                {h}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {rows.length === 0 && (
            <tr>
              <td colSpan={columns.length} className="p-3 text-center text-slate-500">
                –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö
              </td>
            </tr>
          )}
          {rows.map((r, i) => (
            <tr key={i} className={`border-t ${rowClass ? rowClass(r) : ""}`}>
              {columns.map(([_, cell], j) => (
                <td key={j} className="p-2">
                  {cell(r)}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
function KPI({ label, value }) {
  return (
    <div className="bg-white border rounded-2xl p-4 text-center">
      <div className="text-2xl font-bold">{value}</div>
      <div className="text-slate-600 text-sm">{label}</div>
    </div>
  );
}

/* ===== Modals (forms) ===== */
// (—É—Å—ñ –º–æ–¥–∞–ª–∫–∏ –Ω–∏–∂—á–µ ‚Äî –±–µ–∑ –∑–º—ñ–Ω –∑ —Ç–≤–æ—î—ó –≤–µ—Ä—Å—ñ—ó; —è —ó—Ö —Å–∫–æ—Ä–æ—Ç–∏–≤ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è,
// –∞–ª–µ —É —Ç–µ–±–µ –≤–∏—â–µ –º–∏ –∑–∞–ª–∏—à–∏–ª–∏ –ø–æ–≤–Ω–∏–π –∫–æ–¥ ‚Äî —è–∫—â–æ —â–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏–≤, —Å–∫–æ–ø—ñ–π –∑ —Ç–≤–æ—î—ó –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó)

function Modal({ title, onClose, children }) {
  return (
    <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50 p-3">
      <div className="bg-white rounded-2xl border shadow p-4 w-full max-w-xl">
        <div className="flex justify-between items-center mb-3">
          <div className="font-semibold">{title}</div>
          <button className="btn" onClick={onClose}>‚úñ</button>
        </div>
        {children}
      </div>
    </div>
  );
}

/* ‚Ä¶ –î–ê–õ–Ü ‚Äî —Ç–≤–æ—ó ClientModal / ProjectModal / PersonModal / VacancyModal / AssignmentModal / AttendanceModal
     ‚Äî –∑–∞–ª–∏—à —è–∫ —É —Å–≤–æ—ó–π –≤–µ—Ä—Å—ñ—ó –≤–∏—â–µ (–º–∏ —ó—Ö —É–∂–µ –≤—Å—Ç–∞–≤–ª—è–ª–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é). */

/* ===== Logo ===== */
function Logo() {
  return (
    <div className="flex items-center gap-2">
      <svg viewBox="0 0 64 64" width="28" height="28">
        <defs>
          <linearGradient id="flagGrad" x1="0" x2="1" y1="0" y2="1">
            <stop offset="0%" stopColor="#d7141a" />
            <stop offset="50%" stopColor="#11457e" />
            <stop offset="100%" stopColor="#ffd700" />
          </linearGradient>
        </defs>
        <path
          d="M32 4l8 16 18 2-12 12 3 18-17-9-17 9 3-18-12-12 18-2z"
          fill="url(#flagGrad)"
        />
      </svg>
      <span className="font-bold">Czech Employment Connection</span>
    </div>
  );
}

